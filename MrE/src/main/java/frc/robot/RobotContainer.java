// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

 
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;


import com.stuypulse.stuylib.input.gamepads.*;
import com.stuypulse.stuylib.input.Gamepad;


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

// The robot's subsystems
    public final Vision m_vision = new Vision();
    public final Claw m_claw = new Claw();
    public final Wrist m_wrist = new Wrist();
    public final Arm m_arm = new Arm();
    public final Turret m_turret = new Turret();
    public final DriveTrain m_driveTrain = new DriveTrain();

// Creates new gamepads connected to Xbox Controllers
  private final Gamepad driveController = new Xbox(0);
  private final Gamepad armController = new Xbox(1);

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
      configureDefaultCommands();
      configureButtonBindings();
      configureSmartDashboard();
  }      

  private void configureDefaultCommands() {

  }

    /**
   * Creates button bindings for gamepad
   */
  private void configureButtonBindings() {
    // Create some buttons
  }

  //private static SendableChooser<Command> autoChooser = new SendableChooser<>();

  private void configureSmartDashboard() {
    SmartDashboard.putData("Auto Mode", m_chooser);
  }


  public static RobotContainer getInstance() {
    return m_robotContainer;
  }
    
  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

