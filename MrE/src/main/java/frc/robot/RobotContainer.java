// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

 
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;



public class RobotContainer {
  
    private static RobotContainer m_robotContainer = new RobotContainer();
    // The robot's subsystems
    public final DriveTrain m_driveTrain = new DriveTrain();
    
    public Vision m_vision;
    public Claw m_claw;
    public Wrist m_wrist;
    public Arm m_arm;
    public Turret m_turret;

    public DriveCommand driveCommand;

    // Creates new gamepads connected to Xbox Controllers
    private static XboxController driveController = new XboxController(0);
    private final XboxController armController = new XboxController(1);

    // Command choosers
    SendableChooser<Command> m_autoChooser = new SendableChooser<>();

    // Object choosers
    public final SendableChooser<Integer> driverControlsChooser = new SendableChooser<>();
    /** The {@link SendableChooser} that allows the user to select their {@link DriveScaling}. */
    public final SendableChooser<DriveScaling> controllerScalingChooser = new SendableChooser<>();
    public final SendableChooser<Integer> driveModeChooser = new SendableChooser<>();

  
  public static RobotContainer getInstance() {
    if (m_robotContainer == null) {
      m_robotContainer = new RobotContainer();
    }
    return m_robotContainer;
  }
  
  public XboxController getDriveController() {
    return driveController;
  }

  
  private RobotContainer() {
    configureButtonBindings();
    configureSmartDashboard();
  }      

  public void intSubsystems() {
    
    m_vision = new Vision();
    m_claw = new Claw();
    m_wrist = new Wrist();
    m_arm = new Arm();
    m_turret = new Turret();
  }

  public boolean invertMotors() {
    return driveController.getAButtonPressed();
  }

  public boolean enableBrakes() {
    return driveController.getBButton();
  }

  
  private void configureButtonBindings() {
    invertMotors();
    enableBrakes(); 
  }
    
  private void configureSmartDashboard() {

    // Choosers
    m_autoChooser.setDefaultOption("Simple Autonomous", getAutonomousCommand());

    driverControlsChooser.setDefaultOption("Left Stick", 0);
    driverControlsChooser.addOption("Trigger Acceleration", 1);

    controllerScalingChooser.setDefaultOption(DriveScaling.CUBIC.getDisplayText(), DriveScaling.CUBIC);
    controllerScalingChooser.addOption(DriveScaling.QUADRATIC.getDisplayText(), DriveScaling.QUADRATIC);
    controllerScalingChooser.addOption(DriveScaling.SQUARED.getDisplayText(), DriveScaling.SQUARED);
    controllerScalingChooser.addOption(DriveScaling.LIMITED_POLYNOMIC.getDisplayText(), DriveScaling.LIMITED_POLYNOMIC);

    driveModeChooser.setDefaultOption("Semi Curvature", 0);
    driveModeChooser.addOption("Reg Curvature", 1);
    driveModeChooser.addOption("Arcade", 2);
    
    SmartDashboard.putData("Autonomous Mode", m_autoChooser);
    SmartDashboard.putData("Driver Controls", driverControlsChooser);
    SmartDashboard.putData("Drive Controller Scaling", controllerScalingChooser);
    SmartDashboard.putData("Drive Mode", driveModeChooser);

    // Constants
    SmartDashboard.putNumber("Ramp Rate",Constants.DriveConstants.kRampRate);
    SmartDashboard.putNumber("Ramp Rate",Constants.DriveConstants.kDeadband);
    SmartDashboard.putNumber("Ramp Rate",Constants.DriveConstants.kSlewRateLimiter);
  }

  public void manualDrive() {
    driveCommand = new DriveCommand(m_driveTrain, driveController);
    m_driveTrain.setDefaultCommand(driveCommand);
}

public void safeReset() {
  m_driveTrain.stopMotors();
  m_driveTrain.resetEncoders();
}


 
  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_autoChooser.getSelected();
  }

  public int getDriverControlsChooser() {
    return driverControlsChooser.getSelected();
  }

  public int getDriveModeChooser() {
    return driveModeChooser.getSelected();
  }

  public DriveScaling getDriveScaling() {
    return controllerScalingChooser.getSelected();
  }
}
  

