// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.
/*----------------------------------------------------------------------------*/

package frc.robot.commands;

import com.stuypulse.stuylib.streams.filters.*;
import com.stuypulse.stuylib.input.Gamepad;


import com.stuypulse.stuylib.input.gamepads.*;
import com.stuypulse.stuylib.input.Gamepad;
import edu.wpi.first.wpilibj2.command.CommandBase;

import frc.robot.subsystems.DriveTrain;

import java.util.function.DoubleSupplier;

/**
 * Creates teleop drivetrain drive command
 * 
 * @author 23BBrenner
 */
public class DriveCommand extends CommandBase {

    // DriveCommand Variable Declarations 

    // DriveCommand Constructors
    private DriveTrain m_drivetrain;
    private Gamepad m_driveController;

    // StuyLib imported Filters - make driving smoother and more reliable.
    // rc = unmodified imported values.
    // Only applicable to arcade controls
    private IFilter speedFilter = new LowPassFilter (0.4);
    private IFilter turnFilter = new LowPassFilter(0.1);
       
    public DriveCommand(DriveTrain subsystem, Gamepad driveController) {


        m_drivetrain = subsystem;
        m_driveController = driveController; 

        // Ensures that two commands that need the same subsystem dont mess eachother up. 
        addRequirements (m_drivetrain);  
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {

        //Gets the speed from the joysticks
        double speed = m_driveController.getRightTrigger() - m_driveController.getLeftTrigger();
        double turn = m_driveController.getLeftX();

        //Filters the Speed and Turn values. Requires arcade drive.
            // speed = speedFilter.get(speed);
            // turn = turnFilter.get(turn);

            // m_drivetrain.arcadeDrive(speed,turn);
    }
    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}