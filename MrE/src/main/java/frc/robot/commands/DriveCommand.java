// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.
/*----------------------------------------------------------------------------*/

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj.XboxController;
import frc.robot.subsystems.DriveTrain;
import frc.robot.Constants.DriveConstants;
import frc.robot.RobotContainer;

/**
 * Creates teleop drivetrain drive command
 * 
 * @author 23BBrenner
 */
public class DriveCommand extends CommandBase {

	// DriveCommand Variable Declarations

	// DriveCommand Constructors
	private DriveTrain m_drivetrain; // = DriveTrain.getInstance();
	private XboxController m_driveController;
	private int m_driverControlsChoice;
	private int m_driveModeChoice;
	private DriveScaling m_controllerScalingChoice;

	public DriveCommand(DriveTrain subsystem, XboxController controller) {
		m_drivetrain = subsystem;
		m_driveController = controller;
		m_driverControlsChoice = RobotContainer.getInstance().getDriverControlsChooser();
		m_driveModeChoice = RobotContainer.getInstance().getDriveModeChooser();
		m_controllerScalingChoice = RobotContainer.getInstance().getDriveScaling();
		// Ensures that two commands that need the same subsystem dont mess each other
		// up.
		addRequirements(m_drivetrain);
	}

	// Called when the command is initially scheduled.
	@Override
	public void initialize() {

	}

	// Called every time the scheduler runs while the command is scheduled.
	@Override
	public void execute() {
		double speed = 0;
		double rotation = 0;
		driverControls(speed, rotation, m_driverControlsChoice);
		speed = scaleSpeed(speed, m_controllerScalingChoice);
		rotation = scaleRotation(rotation, m_controllerScalingChoice);

		driveMode(speed, rotation, m_driveModeChoice);

		double leftSpeed = speed + rotation;
		double rightSpeed = speed - rotation;

		double max = Math.max(leftSpeed, rightSpeed);

		if (max > 1) {
			leftSpeed /= max;
			rightSpeed /= max;
		}

		m_drivetrain.setWheelSpeeds(leftSpeed, rightSpeed);
	}

	// Called once the command ends or is interrupted.
	@Override
	public void end(boolean interrupted) {
	}

	// Returns true when the command should end.
	@Override
	public boolean isFinished() {
		return false;
	}

	@Override
	public boolean runsWhenDisabled() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
		return false;

	}

	public void driverControls(double speed, double rotation, int choice) {
		scaleDriveSpeed(speed, choice);
		rotation = (m_driveController.getLeftX() * DriveConstants.kRotationOutpoudModifier);
	}

	/**
	 * Modifies the drive speed based on the selected user's acceleration
	 * preference.
	 * 
	 * @param speed              - The current speed.
	 * @param accelerationOption - The user selected option of acceleration.
	 * @return The new speed based on the user's selected {@link DriveScaling}.
	 */
	public double scaleDriveSpeed(double speed, int accelerationOption) {
		if (accelerationOption == 0) { // accelerate with joystick.
			return (m_driveController.getLeftY() * DriveConstants.kSpeedOutputModifier);
		} else { // accelerate with trigger.
			return ((m_driveController.getLeftTriggerAxis() - m_driveController.getRightTriggerAxis())
					* DriveConstants.kSpeedOutputModifier);
		}
	}

	/**
	 * Scales the speed based on the selected {@link DriveScaling}.
	 * 
	 * @param speed        - The current speed input to be scaled.
	 * @param driveScaling - The {@link DriveScaling} being used.
	 * @return The speed adjusted to the given {@link DriveScaling}.
	 */
	public double scaleSpeed(double speed, DriveScaling driveScaling) {
		switch (driveScaling) {
		case CUBIC:
			return speed;
		case LIMITED_POLYNOMIC:
			double halfSpeed = speed / 2;
			return halfSpeed + Math.pow(3, halfSpeed);
		case QUADRATIC:
			double speedSquared = Math.pow(speed, 2);
			return Math.copySign(speedSquared, speed);
		case SQUARED:
			return Math.pow(speed, 3);
		default:
			throw new IllegalStateException(driveScaling + " drive scaling is not supported when scaling speed.");
		}
	}

	/**
	 * Scales the rotation based on the selected {@link DriveScaling}.
	 * 
	 * @param rotation     - The current rotation input to be scaled.
	 * @param driveScaling - The {@link DriveScaling} being used.
	 * @return The rotation adjusted to the given {@link DriveScaling}.
	 */
	public double scaleRotation(double rotation, DriveScaling driveScaling) {
		switch (driveScaling) {
		case CUBIC:
			return rotation;
		case LIMITED_POLYNOMIC:
			double halfSpeed = rotation / 2;
			return halfSpeed + Math.pow(3, halfSpeed);
		case QUADRATIC:
			double speedSquared = Math.pow(rotation, 2);
			return Math.copySign(speedSquared, rotation);
		case SQUARED:
			// TODO: Is this correct? We are raising 3 to the power of rotation.
			return Math.pow(3, rotation);
		default:
			throw new IllegalStateException(driveScaling + " drive scaling is not supported when scaling rotation.");
		}
	}

	public void driveMode(double speed, double rotation, int choice) {
		if (choice == 0) { // semi-curvature
			m_drivetrain.curvatureDrive(speed, rotation, true);
		}
		if (choice == 1) { // regular curvature
			m_drivetrain.curvatureDrive(speed, rotation, false);
		}
		if (choice == 2) { // arcade
			m_drivetrain.arcadeDrive(speed, rotation);
		}
	}

}